---
title: "Box-Jenkins法というフレームワーク"
subtitle: "RによるARIMAモデル"
author: "柳樂 優太 (1260404)"
date: today
execute: 
  echo: true
  warning: false
  message: true
format: 
  pdf:
    fig-width: 5
    fig-height: 3
    toc: true
    toc-depth: 2
    number-sections: true
    include-in-header:
      - text: \setlength{\parindent}{1em}
pdf-engine: lualatex
documentclass: ltjsarticle 
lang: ja
---

# 準備 {-}
```{r global_option}
## PDF に出力する際は cairo を使用する
if (knitr::is_latex_output()) {
  knitr::opts_chunk$set(dev = "cairo_pdf")
}

#パッケージの読み込み
pacman::p_load(tidyverse, 
               broom, 
               coefplot, 
               texreg,
               bayesplot,
               rstan,
               rstanrm,
               parallel,
               posterior,
               cmdstanr,
               patchwork,
               ggplot2,
               tidybayes,
               ggfortify,
               gridExtra,
               forecast,
               tseries,
               summarytools,
               forecast
               )


#日本語の設定
if (.Platform$OS.type == "windows") { 
  if (require(fontregisterer)) {
    my_font <- "Yu Gothic"
  } else {
    my_font <- "Japan1"
  }
} else if (capabilities("aqua")) {
  my_font <- "HiraginoSans-W3"
} else {
  my_font <- "IPAexGothic"
}

theme_set(theme_gray(base_size = 9,
                     base_family = my_font))
```


```{r}
#計算の高速化
rstan_options(auto_write = TRUE) 
options(mc.cores = parallel::detectCores())
```


# 分析の対象

```{r}
front <- Seatbelts[, "front"]
```
交通事故の死傷者をモデル化する

季節性は当然あるだろう

また，ガソリンの値段や法案によって死傷者も変化するだろう


# 対数変化
```{r}
#対数系列
log_front <- log(front)

#図示
ggtsdisplay(log_front ,main = "対数系列" )
```
右下の偏自己相関でも一年単位での大きな自己相関が見られる．


# 差分系列の作成方法

```{r}
#原型列
front

#ラグをとった
stats::lag(front,-1)
```

ラグから現系列を引くこことで差分系列が手に入る

```{r}
front - stats::lag(front,-1)
```



```{r}
#対数差分系列
log_diff <- diff(log_front)

#図示

ggtsdisplay(log_diff,main = "対数差分系列")
```

差分系列は長期にわたって平均値が変化せず，単位根がないことグラフからも分かる．

# 季節成分の取り扱い

1年周期での自己相関が目立った．季節性があると言うことである．

```{r}
#1月毎の図

ggsubseriesplot(front)
```


```{r}
#季節差分をとってみる
frequency(front)


diff(front,lag = frequency(front))

```


次は対数差分系列に対して，季節性とってみる

```{r}
#対数差分にさらに季節差分をとる

seas_log_diff <- diff(log_diff,lag = frequency(log_front))

#図示

ggtsdisplay(seas_log_diff)
```

季節階差をとっても，影響を全て取り除けるわけではない．


# 自己相関とコレログラム

自己相関の図示はしてきたが，数値で欲しいときもある

```{r}
#自己相関
acf(seas_log_diff,plot = F, lag.max = 12)

#図示
autoplot(
  acf(seas_log_diff,plot = F),
  main = "対数系列のコレログラム"
)
```


```{r}
#編相関係数
pacf(seas_log_diff,plot = F, lag.max = 12)

#図示
autoplot(
  pacf(seas_log_diff,plot = F),
  main = "対数系列のコレログラム"
)
```
  

# 訓練データとテストデータに分ける

予測のために，訓練データとテストデータに分割する


まずは対数変換したグラフを作る


```{r}
Seatbelts_log <- Seatbelts[,c("front", "PetrolPrice", "law")]

Seatbelts_log[,"front"] <- log(Seatbelts[,"front"])

Seatbelts_log[,"PetrolPrice"] <- log(Seatbelts[,"PetrolPrice"])
```

最後の一年をテストデータとする

```{r}
train <- window(Seatbelts_log,end = c(1983,12))

test <- window(Seatbelts_log,start = c(1984,1))
```



今回のモデルではfrontが予測対象であり，応答変数である．
```{r}
#説明変数だけを切り出す
petro_law <- train[,c("PetrolPrice","law")]
```


# ARIMAモデルの推定

```{r}
model_sarimax <- Arima(
  y = train[,"front"],
  order = c(1,1,1),                     #(p,d,q)
  seasonal = list(order = c(1,0,0)),    #(P,D,Q)
  xreg = petro_law
)

model_sarimax
```

# 補足

## 差分系列とARIMAの次数の関係

平易にするために，定数項は入れない

- 差分系列とARIMAの字数を確認する

```{r}
Arima(
  y = log_diff, order = c(1, 0, 0),
  include.mean = F
)
```


この結果は実質アリマ(1,1,0)であることを確認する

```{r}
Arima(
  y = log_front, order = c(1, 1, 0),
  
  include.mean = F        #定数項なし
)
```

- SARIMAと季節階差の関係を確認する

対数差分系列に季節階差を導入したデータにARIMA(1,0,0)を適応する

```{r}
Arima(
  y = seas_log_diff,order = c(1,0,0),
  
  include.mean = F          #定数項なし
)
```


これは実質SARIMA(1,1,0)(0,1,0)であることを確認する

```{r}
Arima(
  y = log_front,order = c(1,1,0),
  seasonal = list(order = c(0,1,0))
)
```

 
# 自動選択モデルauto.arima関数

字数の決定は手順はAICを比較することだが，時間がかかるので自動化する．

```{r}
sarimax_petro_law <- auto.arima(
  y = train[,"front"],
  xreg = petro_law,
  ic = "aic",
  max.order = 7,             #p+q+P+Q
  stepwise = F,
  approximation = F,
  parallel = T,
  num.cores = 4
)
```



```{r}
sarimax_petro_law
```
最良とされるモデルを数式に起こしてみる
$$
\begin{aligned}
\left(1 - \sum^{2}_{i = 1} \phi_{i} B^{i} \right) \left(1 - \sum^{0}_{i = 1} \Phi_{i} B^{i} \right) \Delta^{0} \Delta^{1}_{12}y_{t} =& \left(1 + \sum^{1}_{j = 1} \theta_{j} B^{j} \right) \left(1 + \sum^{1}_{j = 1} \Theta_{j} B^{j} \right) \epsilon_{t} \\ 
&+ \sum^{2}_{k = 1}\mathcal{\beta}_{k} x_{k,t}
\end{aligned}
$$

つまりは，まとめると以下のようになる
$$
\begin{aligned}
\left(1 -  \phi_{1} B^{1} - \phi_{2} B^{2} \right)  \Delta^{1}_{12}y_{t} =& \left(1 + \theta_{1} B^{1} \right) \left(1 + \Theta_{1} B^{1}  \right) \epsilon_{t}\\
&+ \mathcal{\beta}_{1} x_{1,t} + \mathcal{\beta}_{2} x_{2,t}\\
&\\
\left(1 -  1.1225 B^{1} + 0.1322 B^{2} \right)  \Delta^{1}_{12}y_{t} =& \left(1 - 0.8690 B^{1} \right) \left(1 - 0.8183 B^{1}  \right) \epsilon_{t}\\
& - 0.3748 x_{1,t}  -0.3431 x_{2,t}\\
\end{aligned}
$$




# 定常性・反転可能性のチェック

特性方程式の解の絶対値$|z|$が1異常であれば反転可能性と定常性を持つ

$$
\begin{aligned}
& 1 - \phi_1 z - \phi_2 z^2 = 0\\
& 1 + \theta_1 z = 0\\
& 1 + \Theta_1 z = 0\\
&\\
& 1 - 1.1225 z + 0.1322 z^2 = 0\\
& 1 -0.8690 z = 0\\
& 1 -0.8183 z = 0\\
\end{aligned}
$$




このチェックは`auto.arima関数の中ですでに行われている`

特定方程式の絶対値を求めるコード
```{r}
#AR項
abs(polyroot(c(1, -coef(sarimax_petro_law)[c("ar1","ar2")])))

#MA項
abs(polyroot(c(1, coef(sarimax_petro_law)[c("ma1")])))

#SAR項

#今回はなかった

#SMA項
abs(polyroot(c(1, coef(sarimax_petro_law)[c("sma1")])))

```



# 残差のチェック

- まずは残差の自己相関の検定を行う

```{r}
checkresiduals(sarimax_petro_law)
```

統計的優位ではない．何もわからなかった．異常の発見ができなかっただけで，良いモデルの保証はない．


- 残差の正規性の検定

```{r}
jarque.bera.test(resid(sarimax_petro_law))
```
正規分布と有意に異なっているとは言えない．何もわからなかった．



# ARIMAによる予測

同定されたモデルを使って予測をします

予測制度の評価にはテストデータを使う．説明変数のデータを作った上で予測を行う


```{r}
petro_law_test <- test[, c("PetrolPrice","law")]
　 
sarimax_f <- forecast(
   sarimax_petro_law,
   xreg = petro_law_test,
   h = 12,                 #12時点先まで予測する
  level = c(95,70)        #95と70信頼区間んも出す
  )

sarimax_f
```


結果の図示

```{r}
autoplot(sarimax_f,predict.clour = 1,main = "ARIMAによる予測")
```
将来の石油価格は本来わからない

将来の石油価格の代理変数を考えないといけない

- 過去の石油価格を予測に使う

```{r}
petro_law_mean <- data.frame(
　   PetrolPrice = rep(mean(train[,"PetrolPrice"]),12),
　   law = rep(1,12)
　 )
 
　 petro_law_mean <- as.matrix(petro_law_mean)
　 
　 sarimax_f_mean <- forecast(sarimax_petro_law, xreg = petro_law_mean)
```

- 直前の値を予測に使う

```{r}
petro_law_tail <- data.frame(
　   PetrolPrice = rep(tail(train[,"PetrolPrice"], n = 1),12),
　  law = rep(1,12)
　  )
　 
　 petro_law_tail <- as.matrix(petro_law_tail)

　 sarimax_f_tail <- forecast(sarimax_petro_law, xreg = petro_law_tail)
```

# ナイーブ予測

- 過去の平均を予測値として使う

```{r}
naive_f_mean <- meanf(train[,"front"], h = 12)
```


- 前時点の値を予測値として使う

```{r}
naive_f_latest <- rwf(train[,"front"], h = 12)
```

# 予測の評価

RMSEは以下のように定義されている
$$
\sqrt{ \frac{1}{T} \sum^{T}_{t = 1} e^2_{t}} = \sqrt{ \frac{1}{T} \sum^{T}_{t = 1} (y_t - \hat{y}_t)^2}
$$

- 将来の石油価格が既知

Rでの実装は以下の通り
```{r}
sarimax_rmse <- sqrt(
　  sum((sarimax_f$mean - test[,"front"])^2) / 
　     length(sarimax_f$mean)
　 )
 
 sarimax_rmse
```

または
```{r}
accuracy(sarimax_f,x = test[, "front"])[,"RMSE"]
```

RMSEは1に近いほど良い指標であることを考慮すると，予測制度は当てはめ精度に劣っていることがわかる．

-　価格が未知である．

```{r}
# 石油価格の平均を使用する
accuracy(sarimax_f_mean, x = test[, "front"])["Test set", "RMSE"]

# 直近の石油価格を使用する

accuracy(sarimax_f_tail, x = test[, "front"])["Test set", "RMSE"]

```



- ナイーブ予測

```{r}
# ナイーブ予測　過去の平均値

accuracy(naive_f_mean, x = test[, "front"])["Test set","RMSE"]

# ナイーブ予測　直近の値

accuracy(naive_f_latest, x = test[, "front"])["Test set","RMSE"]
```




# 発展

##  非定常過程への分析

詳細はnote




















